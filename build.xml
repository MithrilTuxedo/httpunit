<?xml version="1.0" ?> 
<!--  ======================================================================= --> 
<!--  httpunit build file                                                     --> 
<!--  ======================================================================= --> 
<project name="httpunit" default="jar" basedir=".">
    <property name="name" value="httpunit" /> 
    <property name="Name" value="HttpUnit" /> 
    <property name="version" value="1.2" />
    <property name="zip_version" value="1_2" /> 
    <property name="src.dir" value="src" /> 
    <property name="tstsrc.dir" value="test" /> 
    <property name="examples.dir" value="examples" /> 
    <property name="lib.dir" value="lib" />
    <property name="jars.dir" value="" /> 
    <property name="docs.dir" value="doc" /> 
    <property name="build.dir" value="build" /> 
    <property name="build.classes" value="${build.dir}/classes" /> 
    <property name="javadoc.dir" value="${docs.dir}/api" /> 
    <property name="dist.dir" value="dist" /> 
    <property name="classpath" value="" />
    <property name="web.dir" value="web" /> 
    <property name="packages" value="com.meterware.*" /> 
    <property name="build.compiler" value="classic" />
    <property name="test.class" value="com.meterware.httpunit.HttpUnitSuite" /> 
    
 
<!--  ===================================================================  --> 
<!--  Prepares the build directory                                         --> 
<!--  ===================================================================  --> 
<target name="prepare">
    <mkdir dir="${build.dir}" /> 
</target>


<!--  ===================================================================  --> 
<!--  Compiles the source code                                             --> 
<!--  ===================================================================  --> 
<target name="compile" depends="prepare">
    <mkdir dir="${build.classes}" /> 
    <javac srcdir="${src.dir}" destdir="${build.classes}" classpath="${classpath}" 
           debug="on" deprecation="on" optimize="off">
    </javac>
</target>


<!--  ===================================================================  --> 
<!--  Compiles the test code                                               -->
<!--  ===================================================================  --> 
<target name="testcompile" depends="compile">
    <javac srcdir="${tstsrc.dir}" destdir="${build.classes}" classpath="${classpath}" 
           debug="on" deprecation="on" optimize="off">
    </javac>
</target>


<!--  ===================================================================  --> 
<!--  Runs the test code                                                   -->
<!--  Note: the classpath variable must be set on the command line         -->
<!--  ===================================================================  -->
<target name="test" depends="testcompile">
    <java classname="${test.class}"
          fork="yes" classpath="${build.classes};${classpath}" >
    </java>
</target>

 
<!--  ===================================================================  --> 
<!--  Creates the jar archive                                              --> 
<!--  ===================================================================  --> 
<target name="jar" depends="compile">
    <mkdir dir="${lib.dir}" /> 
    <jar jarfile="${lib.dir}/${name}.jar" basedir="${build.classes}" includes="com/**" /> 
</target>


<!--  ===================================================================  --> 
<!--  Creates the API documentation                                        --> 
<!--  ===================================================================  --> 
<target name="javadocs" depends="prepare">
    <mkdir dir="${javadoc.dir}" /> 
    <javadoc packagenames="${packages}" sourcepath="${basedir}/${src.dir}" 
             destdir="${javadoc.dir}" author="true" version="true" 
             windowtitle="${Name} ${version} API" doctitle="${Name}" 
             footer="Copyright &amp;copy; 2000 Russell Gold. See &lt;a href=&quot;http://httpunit.sourceforge.net/doc/license.html&quot;&gt;license agreement&lt;/A&gt; for rights granted." /> 
</target>


<!--  ===================================================================  --> 
<!--  Creates the distribution                                             --> 
<!--  ===================================================================  --> 
<target name="dist" depends="jar,javadocs">
    <mkdir dir="${dist.dir}" /> 
    <mkdir dir="${dist.dir}/lib" /> 
    <mkdir dir="${dist.dir}/doc" /> 
    <mkdir dir="${dist.dir}/doc/api" /> 
    <mkdir dir="${dist.dir}/src" />
    <mkdir dir="${dist.dir}/test" />
    <mkdir dir="${dist.dir}/examples" /> 
    <copydir src="${src.dir}" dest="${dist.dir}/src" /> 
    <copydir src="${tstsrc.dir}" dest="${dist.dir}/test" includes="**/httpunit/*" /> 
    <copydir src="${examples.dir}" dest="${dist.dir}/examples" /> 
    <copydir src="${lib.dir}" dest="${dist.dir}/lib" />
    <copydir src="${jars.dir}" dest="${dist.dir}/lib" includes="Tidy.jar" /> 
    <copyfile src="build.xml" dest="${dist.dir}/build.xml" /> 
    <copydir src="${docs.dir}" dest="${dist.dir}/doc" /> 
    <copyfile src="readme.txt" dest="${dist.dir}/readme.txt" /> 
    <copyfile src="index.html" dest="${dist.dir}/index.html" />
    <replace file="${dist.dir}/index.html" token="var:dist " value="var:dist&gt;" /> 
    <replace file="${dist.dir}/index.html" token="var:publish&gt;" value="var:publish " /> 
  </target>


<!--  ===================================================================  --> 
<!--  Packages the distribution with ZIP                                   --> 
<!--  ===================================================================  --> 
<target name="dist-zip" depends="dist">
    <zip zipfile="${name}_${zip_version}.zip" basedir="${dist.dir}" includes="**" /> 
</target>


<!--  ===================================================================  -->
<!--  Publishes to a web site                                              -->
<!--  ===================================================================  -->
<target name="publish" depends="dist-zip">
    <mkdir dir="${web.dir}" />
    <copydir src="." dest="${web.dir}" includes="*.zip,index.html,doc/**"/>
    <replace file="${web.dir}/index.html" token="var:dist&gt;"    value="var:dist " /> 
    <replace file="${web.dir}/index.html" token="var:publish " value="var:publish&gt;" />
    <replace file="${web.dir}/index.html" token="&lt;version&gt;"    value="${zip_version}" /> 
</target>


<!--  ===================================================================  --> 
<!--  Packages the web site with ZIP                                       --> 
<!--  ===================================================================  --> 
<target name="publish-zip" depends="publish">
    <zip zipfile="${name}_website_${zip_version}.zip" basedir="${web.dir}" includes="**" /> 
</target>


<!--  ===================================================================  --> 
<!--  Cleans up generated stuff                                            --> 
<!--  ===================================================================  --> 
<target name="clean">
    <deltree dir="${build.dir}" /> 
    <deltree dir="${dist.dir}" />
    <deltree dir="${web.dir}" />
</target>


<!--  ===================================================================  --> 
<!--  Total cleanup                                                        --> 
<!--  ===================================================================  --> 
<target name="total-clean" depends="clean">
    <delete file="${name}_${zip_version}.zip" /> 
    <delete file="${name}_website_${zip_version}.zip" /> 
    <deltree dir="${docs.dir}/api" />
    <deltree dir="${lib.dir}" /> 
</target>
 
</project>