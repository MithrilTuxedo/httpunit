HttpUnit release notes

Known problems:
    1. The "_parent" and "_empty" frame targets are not handled correctly
    2. The "accept-charset" attribute for forms is ignored; the page content character set is used to encode any response.
       This behavior matches that currently used by IE and Navigator.

Limitations:
    1. HttpUnit does not support JavaScript
    2. JDK 1.2 or higher is now required


Revision History:
24-Jan-2002
Additions:
    1. You can now call HttpUnitOptions.setAutoRedirect( false ) to enable explicit testing of redirect requests.
    2. WebClient now exposes the protected method writeMessageBody to ease implementation of new subclasses

23-Jan-2002
Problems fixed:
    1. Control characters and spaces created by breaking HTML in the middle are now trimmed from link parameters.

21-Jan-2002
Additions:
    1. MessageBodyWebRequest's constructors and inner class are now public, allowing outside code to create new request classes.
    2. ServletUnit now supports creating a RequestDispatcher from ServletContext to forward to other servlets.
       Support for this is rudimentary at present: query parameters on the request dispatcher create are ignored.

17-Jan-2002
Problems fixed:
    1. Link parameters are now sent in the proper order, as long as parameter validation is not turned off.
    2. Parameter validation is now done for requests built from links

15-Jan-2002
Acknowledgements:
    Thanks to Stefan G. Renz for identifying the infinite loop bug in frame handling

Problems fixed:
    1. An infinite loop would result if a frame had the same name as one of its sub-frames

14-Jan-2002

Problems fixed:
    1. Parameters are now submitted in the order specified in the form, as long as parameter validation is not turned off.
    2. It is no longer permitted to change hidden parameters with parameter validation enabled.
    3. An infinite loop would result if a frame had the same name as one of its sub-frames

Additions:
    1. HttpUnit now handles multiple file form controls with the same name.
    2. It is now possible to set values for a form directly into the form. All such changes will be validated.
       These will be used by any requests derived from the form.

Notes:
    1. Parameter validation is now handled by the form. Requests created from the form while parameter validation is
       enabled will share the variable space of the form and therefore be validated. Requests created while validation
       is disabled will have their own variable space, which is initialized to that of the form.

10-Jan-2002

Problems fixed:
    1. Empty cookies were not being recognized.

12-Dec-2001

Problems fixed:
    1. (bug #492003) JTidyPrintWriter fails to parse columns

 3-Dec-2001

Acknowledgements:
    Thanks to Didier Besset for correcting the WebForm methods: hasParameterNamed and hasParameterStartingWithPrefix

Problems fixed:
    1. hasParameterNamed and hasParameterStartingWithPrefix now check all types of parameters, not just <INPUT> fields

Additions:
    1. Disabled submit buttons are now detected, but requests cannot be made from them unless parameter validation is off.


28-Nov-2001 1.3.0
Acknowledgements:
    Thanks to Oliver Imbusch for finding and fixing problems with parsing of encoded link parameter names and values and
        of link URLs with parameters and fragments.
    Thanks to Paul Frantz and Dave Glowacki for finding and fixing problems with parsing of link parameter names without values.
    Thanks to Didier Besset for new WebForm methods: hasParameterNamed and hasParameterStartingWithPrefix
    Thanks to Peter Roﬂbach for catching some typos in the tutorial.
    Thanks to Benoit Xhenseval for adding a mechanism to handle HTML parser errors.
    Thanks to Benoit Xhenseval for optimizing the use of DOMs and StringBuffers.
    Thanks to Bradley Smith for implementing getParameterNames in ServletUnit.

Problems fixed:
    1. Links with parameters whose names were encoded were being mis-parsed
    2. Links with empty parameter values were being mis-parsed
    3. Most references to TestCase.assert have been renamed to assertTrue in order to prepare for JDK 1.4 and JUnit 3.7
       compatibility. HttpUnitTest and ServletUnitTest implement assertTrue to continue support for JUnit 3.6 and earlier.
    4. ServletUnit was not decoding its request parameters and names
    5. ServletUnit's HttpRequest.getParameterNames method was not implemented
    7. WebSphere cookie values ending with "=" or "==" are now handled.
    8. HttpUnit should now be more tolerant of missing character encodings

Additions:
  Content and parsing enhancements
      1. It is now possible to check a WebForm for the presence of a named parameter.
      2. Disabled submit buttons may no longer be selected from a form
      3. When enabled, parameter validation now prevents changes to readonly controls.
      4. It is now possible to obtain the reason message associated with the status code, either from
         HttpException.getResponseMessageweb() or if exceptions are disabled, from WebResponse.getResponseMessage()
      5. HttpUnitOptions now has methods addHtmlErrorListener and removeHtmlErrorListener. If a listener is registered,
         it will be invoked for every error or warning generated by the parser, indicating the URL, line and column number
         of the error and a textual description of the problem.

  ServletUnit enhancements
      6. ServletUnit now compiles against Servlet 2.3
      7. ServletUnit now handles web.xml partially, supporting:
         a. mapping of exact paths to a servlet class
         b. protected URLs (exact paths only)
         c. Basic and Form authentication
         d. Servlet initialization parameters

   Documentation and Packaging
      8. There is now the beginnings of a tutorial, focused on ServletUnit but covering much of the HttpUnit API
         in doc/tutorial
      9. Archives are now rooted with the build name, following unix conventions

   Optimizations
     10. HttpUnit now pre-allocates StringBuffer instances to their most likely size
     11. DOMs are no longer copied when passed internally'
     12. ByteTag objects no longer allocate Hashtable unless required


25-Oct-2001 1.2.7

Acknowledgements:
    Thanks to Chris Stevenson for identifying a problem with forms lacking an action
    Thanks to Drew Varner for more sophisticated cookie handling, including Set-Cookie2 code
    Thanks to David Karr for pointing out the problem with status code 3xx responses and
        suggesting a fix for it.
    Thanks to Dave Glowacki for the default content-type code.
    Thanks to Brett Neumeier for some Javadoc fixes and adding support for the non-standard "Charset" header
    Thanks to Richard Scothern for identiying the cause of problems with POST requests and older servlet engines.
    Thanks to Benoit Xhenseval for adding parameter detection in links, handling of meta and link tags,
        and selection of table cells by ID.
    Thanks to Mike Bracewell for noticing the incorrect loopback address in ServletUnitHttpRequest

Problems corrected:
    1. Forms with no action now default to the originating page
    2. cookies with embedded commas and quotes are now handled
    3. Status code 3xx responses no longer result in a null pointer exception when
       invoking getText or reading the input stream.
    4. The _self target now works for forms.
    5. Set-Cookie headers are now processed even on responses with 4xx and 5xx status
    6. WebForm.getOptionValues now returns the options in the order listed in the form for both selections and radio buttons.
    7. The refresh handling now recognizes requests with content syntax "<seconds>;<location>" or "<seconds>; URL=<location>"
    8. The http-equiv meta tag was incorrectly matched as "http_equiv"
    9. By default, POSTs included charset attributes which messed up some servlet engines
   10. WebRequest.isFileParameter is now functioning and public
   11. auto-redirect now handles relative URLs
   12. ServletUnit's HttpServletRequest implementation was returning "17.0.0.1" as the host address.

Additions:
    Content and parsing enhancements
        1. Added ID property to SubmitButton
        2. Added ID and name properties to WebLink
        3. May now search web responses for links by name or ID
        4. getParameter() and getParameterNames() now works for requests built from links with embedded parameters.
        5. Image map <area> tags are now recognized as links, whose text is equal to their 'alt' tag. This allows
           them to be retrieved using getLinkWith( altText ).
        6. Added getSubmitButtonWithID to WebForm
        7. Added getMethod and getAction to WebForm
        8. WebResponse.getMetaTagContent can be used to obtain the content of a meta tag (see the Javadoc)
        9. WebResponse.getStylesheet can be used to obtain the path to the stylesheet associated with a page.
       10. Added WebTable.getTableCellWithID

    Request submission enhancements:
       11. Added version of WebRequest.selectFile which allows clients to specify the file to upload using an input
           stream rather than an actual file.
       12. HttpUnitOptions now has a postIncludesCharset which can be set to true when working with newer servlet
           engines which can handle it (such as Tomcat 3.2 or later), and which may be important for internationalization.
       13. It is now possible to upload a file via a POST request not derived from a form. To do this, call
           PostMessageWebRequest.setMimeEncoded( true ) before calling selectFile.
       14. Requests may now have as many values for a text parameter name as the number of <INPUT> tags with that name.

    Response handling enhancements:
       15. It is now possible to see the response accompanying an error status by
           calling HttpUnitOptions.setExceptionsThrownOnErrorStatus( false ) before calling getResponse. This will
           prevent HttpUnit from throwing an exception in such cases. You can still check the status of the response by
           calling WebResponse.getStatusCode()
       16. Added getHeaderFieldNames to WebResponse
       17. The Set-Cookie2 header is now handled
       18. HttpUnitOptions.setDefaultContentType() lets you define a content-type to use when the web server does not
           supply a Content-Type header.
       19. Now recognizes a Charset header if no charset is specified in the Content-type header. There are some servers
           which send this non-standard header.


 6-Jul-2001 1.2.6
Acknowledgements:
    Thanks to Marcos Tarruella for adding a test case for the Base64 class

Additions:
    1. WebResponse.getRefreshRequest now returns a WebRequest object if a refresh URL
       was specified in the response header.
    2. WebResponse.getRefreshDelay specifies the delay found in the header, if any.
    3. HttpUnitOptions.setAutoRefresh controls whether the refresh URL is automatically followed.
    4. ServletUnit now supports HttpServletResponse.getOutputStream
    5. ServletUnit now supports <meta> tag parsing
    6. WebResponse.newResponse added to allow other libraries (such as Apache Cactus)
       to create WebResponse objects without using WebClient.

Problems corrected:
    1. The cookbook was missing parentheses for its constructors
    2. Updated the NearWords example to accomodate changes to the Merriam-Webster site


18-Jun-2001 1.2.5
Acknowledgements:
    Thanks to Rolf Schmidiger for corrected behavior when failing to find a site
    Thanks to Tom Watkins, Deepa Dihr, Marcos Tarruella for their implementation of
       PutMethodWebRequest
    Thanks to Larry Hamel for writing the SSL FAQ

Additions:
    1. selectFile() now can infer file content type for the most common file extensions:
       text, txt, gif, jpg, jpeg, png, html, htm and zip.
    2. A new version of selectFile allows explicit specification of file content type
       which will override any inferred type.
    3. <button> tags are now recognized as submit buttons if their type is "submit"
       or not specified.
    4. Reading the character set from a <meta> tag is now supported.
    5. Added PutMethodWebRequest
    6. PostMethodWebRequest now has a constructor which allows its contents to be
       taken from an InputSource, like PutMethodWebRequest
    7. Added ServletUnitClient and InvocationContext to servletunit to
       permit more granular testing of servlets (still not well documented)
    8. Added getInputStream method in WebResponse to support non-text responses.
    9. Matching of text in web pages is now controlled by the HttpUnitOption property
       'matchesIgnoreCase'. The default behavior is as before - matches are not case sensitive

Problems corrected:
    1. Now throws HttpNotFoundException rather than NullPointerException when
       unable to connect to a web site
    2. I/O exceptions when accessing a site are now thrown, rather than being
       turned into RuntimeException.

Configuration changes:
    1. The build.xml file has been changed to use a specified directory of dependant jars
       rather than the system classpath. This requires at least ant 1.3. It is no longer
       necessary to specify the classpath parameter when running the unit tests.


 5-May-01 1.2.4
Acknowledgements:
    Thanks to Jim Kimball for finding and fixing the redirection of subframes

Problems corrected:
    1. Redirection with subframes was incorrectly targeted at the top frame.
    2. No longer capitalizes all header names; this was necessary for
       compatibility with those servers that do not understand case-insensitive
       header names.
    3. Repeated requests to the same URL were not resending requests properly.
       This caused some problems with validation.
    4. Now correctly passes the full specification of uploaded files, rather than just the name.

Additions:
    1. Transmitted headers as well as received headers are now shown when loggingHttpHeaders
       is enabled.
    2. The GetMethodWebRequest and PostMethodWebRequest constructors which accept a target
       are now public.
    3. Added getID to WebForm
    4. Added getFormWithID to HTMLSegment interface


2-Apr-01 1.2.3
Acknowledgements:
    Thanks to Silvio Samadelli for improved cookie-recognition logic

Problems corrected:
    1. Under JDK 1.3, error headers would sometimes cause a FileNotFoundException
    2. Cookies containing '=' or wrapped in quotes are now recognized
    3. The JavaDoc now correctly shows the public methods in TableCell used for handling nested tables.
    4. The XML retrieval test is no longer run when Xerces is not in the classpath, rather than giving an error.
    5. File upload capability no longer depends on JavaMail and JAF, although its test does
    6. Non-conforming authentication headers are now assumed to be requesting Basic authentication

Additions:
    1. The Referer header is now sent for requests derived from links and forms.

08-Jan-01 1.2.2
Acknowledgements:
    Thanks to Rocky Rhodes for finding the multiple cookie bug
    Thanks to Scott Croco for correcting the response code problem
    Thanks to Ken MacLeod for finding the UTF-8 bug.

Additions:
    1. Initial implementation of file upload capability

Problems corrected:
    1. Multiple cookies were not being sent correctly
    2. When a response was received with a bad response code, it was treated either as a RuntimeException
       or a file not found exception.
    3. Creating a request from a form with an empty <select> tag was generating a SingleValuedParameterException.
    4. Corrected IllegalArgumentException: sun.io.CharToByteUTF-8 that happened in JDK 1.1.x

01-Jan-01 1.2.1
Acknowledgements:
    Thanks to Toyoshi Ushio for helping with the handling of non-English scripts and for translating the home page and cookbook into Japanese.

Problems corrected:
    1. Content-type charset attribute is now recognized, allowing for the proper handling of non-ascii html pages.
    2. Form submissions now use the page character set encoding.
    3. Old format cookie headers (with the expires=attribute) are now recognized.

Additions:
    1. Introductory ServletUnit functionality (parameters and sessions, but no JSP, no forwarding)
    2. Added getTableWithID method to WebResponse, ParsedHTML
    3. Added HttpUnitOptions.setDefaultCharacterSet to handle missing content charset headers, so as not to assume default encoding (iso-8859-1).
    4. WebConversation now has a new public base class: WebClient
    5. Any message header may now be defined, using: WebClient.setHeaderField and will be sent on all subsequent requests
    6. Forms may now be retrieved by their name attributes, using WebResponse.getFormWithName()

16-Nov-00 1.2
Acknowledgements:
    Thanks to Robert Krueger for providing an interface to the xerces parser for XML web responses.
    Thanks to Marco Tamanti and Gabriele Antonelli for suggesting ways to support file URLs

Problems corrected:
    1. Unnamed parameters are no longer submitted as part of a form request
    2. Searching for tables beginning with a string no longer aborts with NullPointerException if the table is missing cells
    3. A problem which caused WebResponse.java to fail compilation under JDK 1.1 has been corrected

Additions:
    1. Forms with multiple buttons are now supported, using the SubmitButton class.
    2. WebResponse now supports finding a table via its summary text, using getTableWithSummary().
    3. XML parsing is now supported. If WebResponse.getDOM is called for a non-HTML response (content type is not "text/html"),
       the xerces parser will be invoked to treat the response as XML.
    4. File URLs (file:xxx) are now supported

17-Oct-00 1.1
Acknowledgements:
    Thanks to Seth Ladd for specific exceptions from WebConversation.getResponse
    Thanks to Dave Glowacki for suggestions on convenience methods in WebResponse and WebLink,
                            and for correcting the set up of the https protocol handling.
    Thanks to Perry Doell for the methods to examine cookies on WebConversation
    Thanks to Ken Hygh for the proper handling of parameters with no specified type
    Thanks to Gabriel Hauser for finding a bug in the handling of parameter defaults

Problems corrected:
    1. The value parameter for checkboxes is no longer ignored
    2. Previously, getTableStartingWith[Prefix] only checked the nested tables in cell (0,0) of each outer table
    3. Parameters with no type specified are now properly handled as text
    4. Base tag is now handled to override defaults for page URL and target
    5. Empty parameter values are now handled

Additions:
    1. The license agreement is now available from the home page and javadoc
    2. Https support is now built in; however, it depends on the JSSE extension (not included).
       See http://java.sun.com/products/jsse.
    3. Frames are now supported. The WebConversation method has two methods: getFrameNames and getFrameContents which
       allow manipulation of frames.
    4. By default, WebRequest.setParameter will now throw IllegalRequestParameterException on any attempt
       to set a form parameter to a value not normally available from the browser.
    5. It is possible to modify the behavior of HttpUnit via static methods on HttpUnitOptions. This includes:
       o enabling parser warnings (disabled by default)
       o disabling parameter validation (enabled by default)
    6. WebConversation.getResponse now throws HttpException if any 4xx or 5xx code is returned. The exact code is
       available from the exception
    7. WebResponse.getTitle() returns the HTML title of the page
    8. WebLink.getURLString() returns the URL string specified by the link in its href attribute
    9. WebResponse.getURL() return the URL used to retrieve the page
   10. WebConversation now supports getCookieNames and getCookieValue to return the current cookies
   11. The WebResponse now can return the response code associated with it (2xx)
   12. Non-breaking spaces are converted to spaces on any conversion to text


1-Sep-00 1.0

Acknowledgements:
Thanks to Jan Ohrstrom for his additions to WebConversation

Problems corrected:
    1. Parsing a response would crash if there were no nodes inside a form
Additions:
    1. WebResponse.getOptions and getOptionValues now return the displayed and parameter value options
       available to the user in a <select>
    2. WebRespose.getLinkWith() and .getLinkWithImageText() can now be used to locate a link in a page
       based on its text or the ALT text attribute of an enclosed image
    3. WebConversation.setUserAgent allows httpunit to pretend to be a particular browser
    4. WebConversation.addCookie allows the test to include additional cookies for the servlets to respond to.
    5. WebLink.asText returns the text value of a link
    6. WebConversation now throws AuthorizationRequiredException when the web server rejects a request
       because of authorization problems.
    7. WebConversation now supports basic authentication via the setAuthorization method.


4-Aug-00 0.9.5
General:
    1. Nested tables are now supported (examples to follow) by using WebTable.getTableCell
    2. table columns and rows used only for formatting may now be ignored using WebTable.purgeEmptyCells
    3. It is now easy to find a table in a page based on the text in its first non-blank column and row,
       using WebResponse.getTableStartingWith
    4. All form controls should now be supported
    5. There is a preliminary cookbook available
Additions:
    1. Deprecated WebTable.getCell, new method is getCellAsText
    2. Added WebTable.getTableCell to return a cell which could contain nested tables or just a DOM to examine
    3. Added WebTable.asText to return a 2D representation of the table
    4. Added WebTable.purgeEmptyCells to eliminate meaningless spacing information
    5. Added copyright notices to most source files
    6. Added support for checkboxes, radio buttons, text areas, and selects


29-Jun-00 0.9.1
Additions:
    1. The PostMethodWebRequest class is now public.
    2. Row and column spans are now handled
    3. Formatting inside table cells is ignored in computing the text value of a cell

19-Jun-00 0.9
Additions:
    1. The parser may be tested during the build by issuing the command: 'ant test -Dclasspath="%classpath%"'

    2. WebResponse now can return an array of the top-level tables in the HTML response.
       Each table may now be asked for its size and the contents of each of its cells.


5-Jun-00   0.8.2
Additions:
    WebResponse now has a getDOM method which permits examination of the DOM equivalent of the response.

1-Jun-00   0.8.1
Problems corrected:
    Default parameter values are ignored
    Parameter values without explicit types were being ignored, rather than defaulting to TEXT
Additions:
    ExampleTest now demonstrates the use of httpunit and JUnit to test servlets
    NearWords demonstrates the use of httpunit to access web site functionality

03-May-00  0.8
Initial public release

